See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  37/41 tests passed
Memory:       1/1 tests passed
Timing:       37/41 tests passed

Aggregate score: 92.20%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.2K Apr 22 18:31 BruteCollinearPoints.java
3.1K Apr 22 18:31 FastCollinearPoints.java
4.1K Apr 22 18:31 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 34]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:4:1: Defining a nested class in this program suggests poor design. [Design]
[WARN] FastCollinearPoints.java:93:43: Using interface inheritance suggests poor design in this program. [Design]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 1000) -> (8000, 8000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 5 extra entries in student solution, including:
      '(1000, 1000) -> (8000, 8000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 18000) -> (3500, 28000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 1 extra entry in student solution:
      '(1000, 18000) -> (3500, 28000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (5120, 20992) -> (8128, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including:
      '(4160, 29184) -> (7168, 29184)'


  * filename = input50.txt
    - segments() contains the same segment more than once
    - segment 1: (18000, 13000) -> (18000, 30000)
    - segment 5: (18000, 13000) -> (18000, 30000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 7: (1000, 9000) -> (1000, 26000)
    - reference segment 5: (1000, 2000) -> (1000, 9000) -> (1000, 13000) -> (1000, 23000) -> (1000, 26000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 7
    - 2 extra entries in student solution, including:
      '(18000, 13000) -> (18000, 30000)'


  * filename = input80.txt
    - segments() contains the same segment more than once
    - segment 2: (30000, 12000) -> (13000, 29000)
    - segment 5: (30000, 12000) -> (13000, 29000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 15: (0, 23000) -> (26000, 23000)
    - reference segment 10: (0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)

    - number of entries in student   solution: 41
    - number of entries in reference solution: 31
    - 10 extra entries in student solution, including:
      '(0, 23000) -> (26000, 23000)'


  * filename = input300.txt
    - segments() contains the same segment more than once
    - segment 1: (7300, 10050) -> (7300, 31650)
    - segment 6: (7300, 10050) -> (7300, 31650)

    - number of entries in student   solution: 7
    - number of entries in reference solution: 6
    - 1 extra entry in student solution:
      '(7300, 10050) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains the same segment more than once
    - segment 0: (0, 0) -> (30000, 0)
    - segment 2: (0, 0) -> (30000, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (10000, 3100) -> (25000, 12400)
    - reference segment 2: (5000, 0) -> (10000, 3100) -> (15000, 6200) -> (20000, 9300) -> (25000, 12400)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 5
    - 10 extra entries in student solution, including:
      '(26000, 10000) -> (18000, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains the same segment more than once
    - segment 284: (15614, 13995) -> (15334, 14491)
    - segment 293: (15614, 13995) -> (15334, 14491)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (16507, 473) -> (16666, 1529)
    - reference segment 253: (16454, 121) -> (16507, 473) -> (16560, 825) -> (16613, 1177) -> (16666, 1529)

    - number of entries in student   solution: 645
    - number of entries in reference solution: 288
    - 357 extra entries in student solution, including:
      '(13180, 30413) -> (14764, 30467)'


  * filename = rs1423.txt
==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2, 6) -> (9, 6)
    - reference segment 0: (0, 6) -> (2, 6) -> (7, 6) -> (8, 6) -> (9, 6)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(2, 6) -> (9, 6)'


    - failed on trial 32 of 500
     10
         0     6
         4     0
         5     0
         2     6
         4     4
         4     8
         8     9
         8     6
         7     6
         9     6

  * 50 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 7: (0, 8) -> (9, 8)
    - segment 11: (0, 8) -> (9, 8)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (7, 0) -> (1, 6)
    - reference segment 4: (7, 0) -> (5, 2) -> (2, 5) -> (1, 6) -> (0, 7)

    - number of entries in student   solution: 70
    - number of entries in reference solution: 39
    - 31 extra entries in student solution, including:
      '(0, 9) -> (8, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 17: (0, 2) -> (7, 2)
    - segment 22: (0, 2) -> (7, 2)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 17: (0, 2) -> (7, 2)
    - reference segment 59: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (5, 2) -> (6, 2) -> (7, 2) -> (9, 2)

    - number of entries in student   solution: 320
    - number of entries in reference solution: 135
    - 185 extra entries in student solution, including:
      '(1, 9) -> (9, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains the same segment more than once
    - segment 6: (1, 14) -> (42, 14)
    - segment 73: (1, 14) -> (42, 14)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 35: (23, 22) -> (23, 48)
    - reference segment 207: (23, 15) -> (23, 22) -> (23, 29) -> (23, 36) -> (23, 48)

    - number of entries in student   solution: 356
    - number of entries in reference solution: 219
    - 137 extra entries in student solution, including:
      '(5, 47) -> (46, 47)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
    - segments() contains the same segment more than once
    - segment 5: (3, 0) -> (3, 4)
    - segment 10: (3, 0) -> (3, 4)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 15: (1, 2) -> (4, 2)
    - reference segment 5: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2)

    - number of entries in student   solution: 28
    - number of entries in reference solution: 16
    - 12 extra entries in student solution, including:
      '(0, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains the same segment more than once
    - segment 13: (2, 0) -> (2, 9)
    - segment 21: (2, 0) -> (2, 9)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 51: (3, 3) -> (6, 9)
    - reference segment 130: (2, 1) -> (3, 3) -> (4, 5) -> (5, 7) -> (6, 9)

    - number of entries in student   solution: 394
    - number of entries in reference solution: 154
    - 240 extra entries in student solution, including:
      '(0, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains the same segment more than once
    - segment 35: (14, 0) -> (2, 4)
    - segment 63: (14, 0) -> (2, 4)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 98: (19, 5) -> (7, 14)
    - reference segment 706: (19, 5) -> (15, 8) -> (11, 11) -> (7, 14) -> (3, 17)

    - number of entries in student   solution: 5646
    - number of entries in reference solution: 2446
    - 3200 extra entries in student solution, including:
      '(8, 19) -> (19, 19)'


  * 5-by-4 grid
    - segments() contains the same segment more than once
    - segment 8: (0, 0) -> (4, 0)
    - segment 9: (0, 0) -> (4, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 14: (1, 3) -> (4, 3)
    - reference segment 5: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)

    - number of entries in student   solution: 17
    - number of entries in reference solution: 13
    - 4 extra entries in student solution, including:
      '(1, 3) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains the same segment more than once
    - segment 1: (0, 2) -> (5, 2)
    - segment 6: (0, 2) -> (5, 2)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 18: (0, 3) -> (4, 3)
    - reference segment 6: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 16
    - 8 extra entries in student solution, including:
      '(0, 3) -> (4, 3)'


  * 10-by-4 grid
    - segments() contains the same segment more than once
    - segment 1: (0, 0) -> (9, 0)
    - segment 4: (0, 0) -> (9, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 18: (1, 0) -> (9, 0)
    - reference segment 12: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0)

    - number of entries in student   solution: 62
    - number of entries in reference solution: 38
    - 24 extra entries in student solution, including:
      '(0, 3) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains the same segment more than once
    - segment 2: (0, 2) -> (14, 2)
    - segment 9: (0, 2) -> (14, 2)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 76: (0, 1) -> (13, 1)
    - reference segment 31: (0, 1) -> (1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (5, 1) -> (6, 1) -> (7, 1) -> (8, 1) -> (9, 1) -> (10, 1) -> (11, 1) -> (12, 1) -> (13, 1) -> (14, 1)

    - number of entries in student   solution: 123
    - number of entries in reference solution: 79
    - 44 extra entries in student solution, including:
      '(7, 3) -> (12, 3)'


  * 25-by-4 grid
    - segments() contains the same segment more than once
    - segment 1: (0, 3) -> (24, 3)
    - segment 12: (0, 3) -> (24, 3)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 142: (1, 0) -> (24, 0)
    - reference segment 92: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (5, 0) -> (6, 0) -> (7, 0) -> (8, 0) -> (9, 0) -> (10, 0) -> (11, 0) -> (12, 0) -> (13, 0) -> (14, 0) -> (15, 0) -> (16, 0) -> (17, 0) -> (18, 0) -> (19, 0) -> (20, 0) -> (21, 0) -> (22, 0) -> (23, 0) -> (24, 0)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 213
    - 84 extra entries in student solution, including:
      '(1, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                  120
=> passed    32   0.00      107880           0         107880                  496
=> passed    64   0.01     1906128           0        1906128                 2016
=> passed   128   0.09    32004000           0       32004000                 8128
=> passed   256   1.36   524377920           0      524377920                32640
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                  143
=> passed    32   0.00      107880           0         107880                  536
=> passed    64   0.01     1906128           0        1906128                 2098
=> passed   128   0.09    32004000           0       32004000                 8304
=> passed   256   1.37   524377920           0      524377920                32973
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2016           0           2016                 2016
=> passed   128   0.00        8128           0           8128                 8128
=> passed   256   0.01       32640           0          32640                32640
=> passed   512   0.03      130816           0         130816               130816
=> passed  1024   0.09      523776           0         523776               523776
=> passed  2048   0.30     2096128           0        2096128              2096128
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (2096128 / 523776) = 2.00
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2016           0           2016                20939
=> passed   128   0.01        8128           0           8128                94946
=> passed   256   0.02       32640           0          32640               421030
=> FAILED   512   0.04      130816           0         130816              1839326   (1.3x)
=> FAILED  1024   0.15      523776           0         523776              7953244   (1.4x)
=> FAILED  2048   0.54     2096128           0        2096128             34107447   (1.6x)
=> FAILED  4096   2.28     8386560           0        8386560            145487081   (1.7x)
==> 3/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (8386560 / 2096128) = 2.00
=> passed

==> 4/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2016           0           2016                 5766
=> passed   128   0.00        8128           0           8128                27087
=> passed   256   0.01       32640           0          32640               121890
=> passed   512   0.03      130816           0         130816               534270
=> passed  1024   0.11      523776           0         523776              2300875
=> passed  2048   0.44     2096128           0        2096128              9811188
=> passed  4096   1.88     8386560           0        8386560             41645467
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (8386560 / 2096128) = 2.00
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2016           0           2016                 5169
=> passed   128   0.00        8128           0           8128                22523
=> passed   256   0.01       32640           0          32640                97678
=> passed   512   0.02      130816           0         130816               418228
=> passed  1024   0.10      523776           0         523776              1764613
=> passed  2048   0.43     2096128           0        2096128              7384963
=> passed  4096   1.79     8386560           0        8386560             30796380
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (8386560 / 2096128) = 2.00
=> passed

==> 8/8 tests passed

Total: 27/31 tests passed!


================================================================