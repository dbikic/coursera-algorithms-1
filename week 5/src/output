Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  31/35 tests passed
Memory:       16/16 tests passed
Timing:       26/42 tests passed

Aggregate score: 85.52%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.5K Apr 28 12:37 KdTree.java
1.9K Apr 28 12:37 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At KdTree.java:[line 40]
M D UP_UNUSED_PARAMETER UP: Static or private method KdTree.rangeSearch(KdTree$Node, KdTree$Node, RectHV, ArrayList) has unused parameters  At KdTree.java:[lines 177-185]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:93: Avoid unused local variables, such as 'i'. [UnusedLocalVariable]
KdTree.java:176: Avoid unused parameter variables, such as 'parentNode'. [UnusedFormalParameter]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:216: Did you mean to use 'Double.POSITIVE_INFINITY' instead of 'Double.MAX_VALUE'? [Infinity]
[WARN] KdTree.java:221:3: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:222:3: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] KdTree.java:233: Did you mean to use 'Double.POSITIVE_INFINITY' instead of 'Double.MAX_VALUE'? [Infinity]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.13, 0.46] x [0.39, 0.57]
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      A E B D C
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B C D
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  I
    - reference range():  I
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.67, 0.81] x [0.06, 0.95]
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      A B H I G J C F D E
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B G J H I
    - failed on trial 1 of 1000

==> FAILED

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.625, 0.875] x [0.375, 0.75]
    - sequence of points inserted:
      A  1.0 0.625
      B  0.125 0.125
      C  0.375 0.0
      D  0.75 0.25
      E  0.5 0.5
      F  0.25 1.0
    - student kd-tree nodes involved in calls to Point2D methods:
      A B D E F C
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D E F
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns correct set of points
    - student   range():  A E
    - reference range():  A E
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.0, 0.75] x [0.4375, 0.625]
    - sequence of points inserted:
      A  0.375 0.5625
      B  0.9375 0.0625
      C  0.1875 0.8125
      D  0.4375 0.25
      E  0.5 0.5
      F  0.5625 1.0
      G  0.8125 0.0
      H  0.3125 0.375
      I  0.0625 0.1875
      J  1.0 0.875
    - student kd-tree nodes involved in calls to Point2D methods:
      A B D E F J G C H I
    - reference kd-tree nodes involved in calls to Point2D methods:
      A C H I B D E F J
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns correct set of points
    - student   range():  E N T
    - reference range():  E N T
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.5, 0.9375] x [0.625, 0.90625]
    - sequence of points inserted:
      A  0.21875 0.1875
      B  0.6875 0.4375
      C  1.0 0.0
      D  0.3125 0.84375
      E  0.8125 0.71875
      F  0.53125 0.28125
      G  0.09375 0.5
      H  0.84375 0.40625
      I  0.28125 0.3125
      J  0.625 0.125
      K  0.90625 0.5625
      L  0.40625 0.25
      M  0.03125 0.78125
      N  0.59375 0.8125
      O  0.0 0.0625
      P  0.96875 0.875
      Q  0.1875 0.21875
      R  0.46875 0.59375
      S  0.34375 0.09375
      T  0.78125 0.75
    - student kd-tree nodes involved in calls to Point2D methods:
      A B D E N P T K R C F H I J L S G M O Q
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D E K R N P T
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns correct set of points
    - student   range():  B H B C C P Y Z D E L
    - reference range():  B C L E P Y Z D H B C
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.453125, 1.0] x [0.359375, 0.9375]
    - number of entries in student   solution: 30
    - number of entries in reference solution: 25
    - 5 extra entries in student solution, including:
      '(0.125, 1.0)'

    - failed on trial 1 of 1000

==> FAILED

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.25, 0.97)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A E B D C
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.083, 0.51)
    - reference nearest() = (0.083, 0.51)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.16, 0.46)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C F D E H G J I
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (1.0, 0.125)
    - reference nearest() = (1.0, 0.125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.875, 0.5)
    - sequence of points inserted:
      A  0.25 0.625
      B  1.0 0.125
      C  0.125 1.0
      D  0.0 0.0
      E  0.75 0.875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.125, 0.25)
    - reference nearest() = (0.125, 0.25)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.0)
    - sequence of points inserted:
      A  1.0 0.3125
      B  0.625 0.875
      C  0.5625 0.375
      D  0.0 0.4375
      E  0.75 1.0
      F  0.875 0.8125
      G  0.125 0.25
      H  0.9375 0.9375
      I  0.3125 0.625
      J  0.8125 0.5625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E C F D I G J H
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D G F J
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.25, 0.84375)
    - reference nearest() = (0.25, 0.84375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.3125, 0.78125)
    - sequence of points inserted:
      A  0.78125 0.46875
      B  0.90625 1.0
      C  0.5625 0.0
      D  0.6875 0.8125
      E  0.75 0.15625
      F  0.09375 0.75
      G  0.15625 0.53125
      H  0.21875 0.5
      I  0.53125 0.28125
      J  0.65625 0.03125
      K  0.03125 0.3125
      L  0.25 0.84375
      M  0.34375 0.21875
      N  0.9375 0.1875
      O  0.40625 0.0625
      P  0.125 0.25
      Q  0.875 0.375
      R  0.5 0.6875
      S  0.375 0.59375
      T  0.8125 0.09375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C N Q T D E F L G H K R I S J M O P
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D F L G H R S
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.546875, 0.90625)
    - reference nearest() = (0.546875, 0.90625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 30
    - number of reference entries = 9
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.140625, 1.0)
    - reference entry 2 = (0.953125, 0.46875)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.796875, 0.71875)
    - reference nearest() = (0.796875, 0.71875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 11
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.9375, 0.9921875)
    - reference entry 1 = (0.40625, 0.0)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.78515625, 0.2890625)
    - reference nearest() = (0.78515625, 0.2890625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 1000
    - number of reference entries = 18
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.00634765625, 0.65771484375)
    - reference entry 2 = (0.15625, 0.10009765625)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 23/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          224                160
=> passed        2          416                288
=> passed        5          680                672
=> passed       10         1120               1312
=> passed       25         2440               3232
=> passed      100         9040              12832
=> passed      400        35440              51232
=> passed      800        70640             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.02 n + 229.22  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     869817
=> passed   320000     859973
=> passed   640000     553647
=> passed  1280000     520519
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     518782
=> passed   320000     650923
=> passed   640000     428400
=> passed  1280000     495949
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3707
=> passed    20000       1291
=> passed    40000        423
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3718
=> passed    20000       1352
=> passed    40000        642
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     720329               0.0              44.3              42.3               0.0
=> passed   320000     909165               0.0              45.1              43.1               0.0
=> passed   640000     512545               0.0              48.1              46.1               0.0
=> passed  1280000     438770               0.0              52.3              50.3               0.0
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     821067              37.0              35.0               0.0
=> passed    20000    1056021              39.3              37.3               0.0
=> passed    40000     887264              43.6              41.6               0.0
=> passed    80000     540154              44.0              42.0               0.0
=> passed   160000     669217              46.5              44.5               0.0
=> passed   320000     476486              50.1              48.1               0.0
=> passed   640000     516553              51.4              49.4               0.0
=> passed  1280000     414056              54.4              52.4               0.0
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> FAILED    10000       6265   (0.1x)      0.0           10000.0  (33.3x)  15026.8  (75.1x)    224.0   (2.2x)
=> FAILED    20000       1930   (0.0x)      0.0           20000.0  (66.7x)  29955.0 (149.8x)    317.4   (3.2x)
=> FAILED    40000        796   (0.0x)      0.0           40000.0 (133.3x)  59852.4 (299.3x)    444.9   (4.4x)
=> FAILED    80000        214   (0.0x)      0.0           80000.0 (266.7x) 120380.2 (601.9x)    628.7   (6.3x)
=> FAILED   160000         90   (0.0x)      0.0          160000.0 (533.3x) 242051.1 (1e+03x)    877.5   (8.8x)
=> FAILED   320000         48   (0.0x)      0.0          320000.0 (1e+03x) 487303.4 (2e+03x)   1260.4  (12.6x)
=> FAILED   640000         26   (0.0x)      0.0          640000.0 (2e+03x) 960870.6 (5e+03x)   1891.0  (18.9x)
=> FAILED  1280000         12   (0.0x)      0.0          1280000.0 (4e+03x) 1850740.7 (9e+03x)   2623.7  (26.2x)
==> 0/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000     5600   (0.2x)      19999.0  (33.3x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    20000     2056   (0.1x)      39999.0  (66.7x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    40000      925   (0.0x)      79999.0 (133.3x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    80000      436   (0.0x)     159999.0 (266.7x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   160000      228   (0.0x)     319999.0 (533.3x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   320000       65   (0.0x)     639999.0 (1e+03x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   640000       21   (0.0x)    1279999.0 (2e+03x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED  1280000        9   (0.0x)    2559999.0 (4e+03x)           0.0                     0.0   (0.0x)      0.0   (0.0x)
==> 0/8 tests passed



Total: 12/28 tests passed!


================================================================
